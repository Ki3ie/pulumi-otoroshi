// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'otoroshi:proxy:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    declare public /*out*/ readonly _loc: pulumi.Output<outputs.common.LocationOutput>;
    declare public readonly backend: pulumi.Output<outputs.proxy.BackendOutput>;
    declare public readonly backend_ref: pulumi.Output<string | undefined>;
    declare public readonly bound_listeners: pulumi.Output<string[]>;
    declare public readonly capture: pulumi.Output<boolean>;
    declare public readonly debug_flow: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly export_reporting: pulumi.Output<boolean>;
    declare public readonly frontend: pulumi.Output<outputs.proxy.FrontendOutput>;
    declare public readonly groups: pulumi.Output<string[]>;
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly plugins: pulumi.Output<outputs.proxy.PluginOutput[]>;
    declare public readonly tags: pulumi.Output<string[]>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["backend"] = args?.backend;
            resourceInputs["backend_ref"] = args?.backend_ref;
            resourceInputs["bound_listeners"] = args?.bound_listeners;
            resourceInputs["capture"] = args?.capture;
            resourceInputs["debug_flow"] = args?.debug_flow;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["export_reporting"] = args?.export_reporting;
            resourceInputs["frontend"] = args?.frontend;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["location"] = args?.location;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["_loc"] = undefined /*out*/;
            resourceInputs["plugins"] = undefined /*out*/;
        } else {
            resourceInputs["_loc"] = undefined /*out*/;
            resourceInputs["backend"] = undefined /*out*/;
            resourceInputs["backend_ref"] = undefined /*out*/;
            resourceInputs["bound_listeners"] = undefined /*out*/;
            resourceInputs["capture"] = undefined /*out*/;
            resourceInputs["debug_flow"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["export_reporting"] = undefined /*out*/;
            resourceInputs["frontend"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["plugins"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    backend?: pulumi.Input<inputs.proxy.BackendInputsArgs>;
    backend_ref?: pulumi.Input<string>;
    bound_listeners?: pulumi.Input<pulumi.Input<string>[]>;
    capture?: pulumi.Input<boolean>;
    debug_flow?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    export_reporting?: pulumi.Input<boolean>;
    frontend?: pulumi.Input<inputs.proxy.FrontendInputsArgs>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<inputs.common.LocationInputsArgs>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
